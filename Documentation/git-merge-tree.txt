git-merge-tree(1)
=================

NAME
----
git-merge-tree - Perform merge without touching index or working tree


SYNOPSIS
--------
[verse]
'git merge-tree' [--write-tree] [<options>] <branch1> <branch2>
'git merge-tree' [--trivial-merge] <base-tree> <branch1> <branch2> (deprecated)

DESCRIPTION
-----------

Performs a merge, but does not make any new commits and does not read
from or write to either the working tree or index.

The first form will merge the two branches, doing a real merge.  A real
merge is distinguished from a trivial merge in that it includes:

  * three way content merges of individual files
  * rename detection
  * proper directory/file conflict handling
  * recursive ancestor consolidation (i.e. when there is more than one
    merge base, creating a virtual merge base by merging the merge bases)
  * etc.

After the merge completes, the first form will create a new toplevel
tree object.  See `OUTPUT` below for details.

The second form is deprecated; it is kept for backward compatibility
reasons but may be deleted in the future.  Other than the optional
`--trivial-merge`, it accepts no options.  It can only do a trivial
merge.  It reads three tree-ish, and outputs trivial merge results and
conflicting stages to the standard output in a semi-diff format.
Since this was designed for higher level scripts to consume and merge
the results back into the index, it omits entries that match
<branch1>.  The result of this second form is similar to what
three-way 'git read-tree -m' does, but instead of storing the results
in the index, the command outputs the entries to the standard output.
This form not only has limited applicability, the output format is
also difficult to work with, and it will generally be less performant
than the first form even on successful merges (especially if working
in large repositories).  The remainder of this manual will only
discuss the first form.

OPTIONS
-------

--name-only::
	In the Conflicted file info section, instead of writing a list
	of (mode, oid, stage, path) tuples to output for conflicted
	files, just provide a list of filenames with conflicts (and
	do not list filenames multiple times if they have multiple
	conflicting stages).

--[no-]messages::
	Write any informational messages such as "Auto-merging <path>"
	or CONFLICT notices to the end of stdout.  If unspecified, the
	default is to include these messages if there are merge
	conflicts, and to omit them otherwise.

OUTPUT
------

By default, for a successful merge, the output from git-merge-tree is
simply one line:

	<OID of toplevel tree>

Whereas for a conflicted merge, the output is by default of the form:

	<OID of toplevel tree>
	<Conflicted file info>
	<Informational messages>

These are discussed individually below.

OID of toplevel tree
~~~~~~~~~~~~~~~~~~~~

This is a tree object that represents what would be checked out in the
working tree at the end of `git merge`.  If there were conflicts, then
files within this tree may have embedded conflict markers.

Conflicted file info
~~~~~~~~~~~~~~~~~~~~

This is a sequence of lines with the format

	<mode> <object> <stage> <filename>

The filename will be quoted as explained for the configuration
variable `core.quotePath` (see linkgit:git-config[1]).  However, if
the `--name-only` option is passed, the mode, object, and stage will
be omitted.

Informational messages
~~~~~~~~~~~~~~~~~~~~~~

This always starts with a blank line to separate it from the previous
sections, and then has free-form messages about the merge, such as:

  * "Auto-merging <file>"
  * "CONFLICT (rename/delete): <oldfile> renamed...but deleted in..."
  * "Failed to merge submodule <submodule> (<reason>)"
  * "Warning: cannot merge binary files: <filename>"

EXIT STATUS
-----------

For a successful, non-conflicted merge, the exit status is 0.  When the
merge has conflicts, the exit status is 1.  If the merge is not able to
complete (or start) due to some kind of error, the exit status is
something other than 0 or 1 (and the output is unspecified).

USAGE NOTES
-----------

git-merge-tree was written to be low-level plumbing, similar to
hash-object, mktree, commit-tree, write-tree, update-ref, and mktag.
Thus, it could be used as a part of a series of steps such as

       NEWTREE=$(git merge-tree --write-tree $BRANCH1 $BRANCH2)
       test $? -eq 0 || die "There were conflicts..."
       NEWCOMMIT=$(git commit-tree $NEWTREE -p $BRANCH1 -p $BRANCH2)
       git update-ref $BRANCH1 $NEWCOMMIT

Note that when the exit status is non-zero, NEWTREE in this sequence
will contain a lot more output than just a tree.

git-merge-tree was written to provide users with the same information
that they'd have access to if using `git merge`:
  * what would be written to the working tree (the <OID of toplevel tree>)
  * the higher order stages that would be written to the index (the
    <Conflicted file info>)
  * any messages that would have been printed to stdout (the <Informational
    messages>)

GIT
---
Part of the linkgit:git[1] suite
